#
# Oracle Linux Automation Manager
#
# Copyright (c) 2022 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# https://oss.oracle.com/licenses/upl.
#
# Description: Playbook to add a user with password to the targeted host.
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# This playbook uses the following additional variables which should be configured at run time,
#
# username: name of the user to create [oracle]
# user_default_password: password to assign to the new user [oracle]
# enable_sudo: [true|false]
# enable_passwordless_sudo: [true|false]
# ssh_keyfile: location of public key file on Oracle Linux Automation Manager server [~/.ssh/key.pub]
# ssh_keyurl: url containing public key file [http://github.com/username.keys]
#

---
- hosts: all
  become: yes

  vars:
    username:
    user_default_password:
    enable_sudo:
    enable_passwordless_sudo:
    ssh_keyfile:
    ssh_keyurl:

  tasks:

    - name: add user account with access to sudo
      user:
        name: "{{ username }}"
        password: "{{ user_default_password | password_hash('sha512') }}"
        comment: Ansible created user
        update_password: on_create

    - name: add user to wheel group for sudo access
      user:
        name: "{{ username }}"
        group: wheel
        append: yes
      when: enable_sudo|default(false)|bool == true

    - name: set authorized key for user using local pubilc key file
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ lookup('file', '{{ ssh_keyfile }}') }}"
      when: ssh_keyfile is defined and ssh_keyfile

    - name: set authorized key for user using local pubilc key file
      authorized_key:
        user: "{{ username }}"
        state: present
        key: "{{ ssh_keyurl }}"
      when: ssh_keyurl is defined and (ssh_keyurl|length > 0)

    - name: set user with passwordless sudo access
      lineinfile:
        path: /etc/sudoers.d/oracle
        regexp: '{{ username }} ALL='
        line: '{{ username }} ALL=(ALL:ALL) NOPASSWD: ALL'
        state: present
        create: yes
      when: enable_passwordless_sudo|default(false)|bool == true


