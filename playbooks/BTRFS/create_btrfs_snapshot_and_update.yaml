#
# Oracle Linux Automation Manager
#
# Copyright (c) 2022 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at
# https://oss.oracle.com/licenses/upl.
#
# Description: Playbook create a BTRFS snapshot then dnf update
#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#

---
- hosts: all
  become: yes

  tasks:
    - name: Gather uname output to determine if system is running Oracle Linux 8 UEK
      command: uname -r
      register: uname_contents

    - name: Fail if system is not running Oracle Linux 8 UEK
      fail:
        msg: System is not running Oracle Linux 8 UEK, we need to exit
      when: uname_contents.stdout.find('el8uek') == -1

    - name: Gather btrfs output for the root filesystem to determine if system if running btrfs
      command: stat -f --format="%T" /
      register: btrfs_contents

    - name: Fail if system is not using btrfs for the root filesystem
      fail:
        msg: System is not using btrfs for the root filesystem, we need to exit
      when: btrfs_contents.stdout.find('btrfs') == -1

    - name: Check and fail if /mnt is already mounted
      shell: mountpoint /mnt
      register: mount
      ignore_errors: True

    - name: Fail if /mnt is already mounted
      fail:
        msg: The /mnt filesystem, is already mounted we need to exit
      when: mount.rc == 0

    - name: Check that the /mnt filesystem exists, if not we will create it
      file:
        path: /mnt
        state: directory
        mode: '0755'

    - name: Get the top level subvolume id for the root filesystem
      shell: btrfs subvolume list / | awk 'NR == 1 {print $7}'
      register: top_subvolid

    - set_fact:
        top_subvolid_string: "{{ top_subvolid.stdout }}"

    - debug:
        msg: "Current subvolume id for root = {{ top_subvolid_string }}"

    - name: Get the disk device that is supporting the root filesystem
      shell: df -hT | grep /$ | awk '{print $1}'
      register: diskdevice

    - set_fact:
        diskdevice_string: "{{ diskdevice.stdout }}"

    - debug:
        msg: "Current disk device = {{ diskdevice_string }}"

    - name: Mount the root filesystem on /mnt
      shell: mount -o subvolid="{{ top_subvolid_string }}" "{{ diskdevice_string }}" /mnt
      args:
         warn: false # set warn=false to prevent warning
      ignore_errors: True

    - name: Check the /mnt/snapshots directory exists, if not we will create it
      file:
        path: /mnt/snapshots
        state: directory
        mode: '0755'

    - name: Take a snapshot of the root filesystem 
      shell: |
        cd /mnt
        btrfs subvolume snapshot root snapshots/"{{ snapshot_name }}"

    - name: Unmount /mnt
      mount:
        path: /mnt
        state: unmounted

    - name: Install yum-utils if not present as we need it for auto reboot
      ansible.builtin.dnf:
        name: yum-utils
        state: latest
      when: ansible_distribution == 'OracleLinux' and (ansible_facts['distribution_version'] is version('8', '>='))

    - name: update all packages for Oracle Linux 8
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_distribution == 'OracleLinux' and (ansible_facts['distribution_version'] is version('8', '>='))

    - name: check if reboot required
      command: /usr/bin/needs-restarting -r
      register: reboot_required
      ignore_errors: yes
      changed_when: false
      failed_when: reboot_required.rc == 2
      when: ansible_distribution == 'OracleLinux'

    - debug:
        msg: "Checking if reboot is required: {{ reboot_required.stdout }}"

    - name: reboot (if needed) to apply latest kernel and updates
      reboot:
      when: ansible_distribution == 'OracleLinux' and reboot_required.rc == 1
