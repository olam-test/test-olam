---
- name: Create oracle user to run tasks on target host
  hosts: all
  become: yes

  tasks:

  - name: add user account with access to sudo
    user:
      name: "{{ username }}"
      password: "{{ user_default_password | password_hash('sha512') }}"
      comment: Ansible created user
      groups: wheel
      append: yes
      update_password: on_create

  - name: set authorized key for user using local pubilc key file
    authorized_key:
      user: "{{ username }}"
      state: present
      key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/{{ ssh_keyfile  }}.pub') }}"

  - name: set user with passwordless sudo access
    lineinfile:
      path: '/etc/sudoers.d/{{ username }}'
      regexp: '{{ username }} ALL='
      line: '{{ username}} ALL=(ALL:ALL) NOPASSWD: ALL'
      state: present
      create: yes


# Install required packages on hosts

- name: Install required packages on hosts
  hosts: all
  collections:
    - ansible.posix
    - community.general
    - community.postgresql
    - community.crypto
  become: yes

  tasks:

    - name: install Oracle EPEL repository
      dnf:
        name: oracle-epel-release-el8
        state: present
      when:
        - ansible_facts['distribution_major_version'] == '8'

    - name: install version lock plugin
      dnf:
        name: python3-dnf-plugin-versionlock
        enablerepo: ol8_developer_EPEL
        state: present

    - name: version lock python3-click
      community.general.yum_versionlock:
        state: present
        name: python3-click

    - name: install additional packages for ansible
      dnf:
        name:
          - python3-psycopg2
          - python3-pyOpenSSL
          - python3-pip
        enablerepo: ol8_developer_EPEL
        state: latest

    - name: install pexpect
      pip:
        name: pexpect
      environment: "{{ pip_proxy_env }}"

  environment: "{{ proxy_env }}"

# Install and configure OLAM database

- name: Install and configure OLAM database
  hosts: control_node
  collections:
    - ansible.posix
    - community.general
    - community.postgresql
    - community.crypto
  become: yes

  vars:
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

  tasks:

    - name: enable the PostgreSQL 13 module stream
      copy:
       dest: /etc/dnf/modules.d/postgresql.module
       content: |
         [postgresql]
         name=postgresql
         stream=13
         profiles=
         state=enabled
      when:
        - ansible_distribution_major_version | int >= 8

    - name: install the database
      dnf:
        name: postgresql-server
        state: present
      environment: "{{ proxy_env }}"

    - name: ensure postgresql data directory exists
      file:
        path: "/var/lib/pgsql/data"
        owner: "postgres"
        group: "postgres"
        state: directory
        mode: 0700

    - name: check if postgresql is initialized
      stat:
        path: "/var/lib/pgsql/data/PG_VERSION"
      register: pgdata_dir_version

    - name: initialize postgresql database
      command: "postgresql-setup --initdb"
      when: not pgdata_dir_version.stat.exists
      become_user: postgres

    - name: change database password storage encryption
      ansible.builtin.replace:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: '^#password_encryption.*'
        replace: 'password_encryption = scram-sha-256'

    - name: Enable and start postgresql.service
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: create awx postgresql user
      community.postgresql.postgresql_user:
        name: awx
        password: "{{ awx_pguser_password }}"
        role_attr_flags: NOSUPERUSER
      become_user: postgres

    - name: create awx postgresql db
      community.postgresql.postgresql_db:
        name: awx
        owner: awx
      become_user: postgres

    - name: update host-based authentication
      ansible.builtin.lineinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        line: "host  all  all 0.0.0.0/0 scram-sha-256"

    - name: set the database listening address
      ansible.builtin.lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        insertbefore: '^#port = 5432'
        line: "listen_addresses = '{{ node_ip }}'"

    - name: set firewall port rules for db
      ansible.posix.firewalld:
        zone: public
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - 5432/tcp

    - name: restart the database
      systemd:
        name: postgresql
        state: restarted

# Configure OLAM 2.1 host

- name: Configure OLAM 2.1 host
  hosts: control_node
  collections:
    - ansible.posix
    - community.general
    - community.postgresql
    - community.crypto
  become: yes

  vars:
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

  tasks:

    - name: install Oracle Linux Automation Manager repository
      dnf:
        name: oraclelinux-automation-manager-release-el8
        state: present
      environment: "{{ proxy_env }}"

    - name: disable Oracle Linux Automation Manager 1.0 repository
      ini_file:
        path: "/etc/yum.repos.d/oraclelinux-automation-manager-ol8.repo"
        section: ol8_automation
        option: enabled
        value: "0"
        mode: 0644

    - name: enable Oracle Linux Automation Manager 2.0 repository
      ini_file:
        path: "/etc/yum.repos.d/oraclelinux-automation-manager-ol8.repo"
        section: ol8_automation2
        option: enabled
        value: "1"
        mode: 0644

    - name: install Oracle Linux Automation Manager
      dnf:
        name: ol-automation-manager
        state: present
      environment: "{{ proxy_env }}"

    - name: edit unixsocket in /etc/redis.conf
      lineinfile:
        path: /etc/redis.conf
        regexp: '^unixsocket '
        insertafter: '^# unixsocketperm '
        line: unixsocket /var/run/redis/redis.sock

    - name: edit unixsocketperm in /etc/redis.conf
      lineinfile:
        path: /etc/redis.conf
        regexp: '^unixsocketperm '
        insertafter: '^unixsocket '
        line: unixsocketperm 775

    - name: configure CLUSTER_HOST_ID setting
      copy:
        dest: /etc/tower/conf.d/olam.py
        content: |
          CLUSTER_HOST_ID = "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        owner: awx
        group: awx
        mode: '0640'

    - name: provision olam ansible container environment
      containers.podman.podman_image:
        name: container-registry.oracle.com/oracle_linux_automation_manager/olam-ee
      become_user: awx
      environment: "{{ proxy_env }}"

    - name: Generate an OpenSSL private key with a different size (2048 bits)
      community.crypto.openssl_privatekey:
        path: /etc/tower/tower.key
        size: 2048

    - name: Generate an OpenSSL Certificate Signing Request
      community.crypto.openssl_csr:
        path: /etc/tower/tower.csr
        privatekey_path: /etc/tower/tower.key

    - name: Generate a Self Signed OpenSSL certificate
      community.crypto.x509_certificate:
        path: /etc/tower/tower.crt
        privatekey_path: /etc/tower/tower.key
        csr_path: /etc/tower/tower.csr
        provider: selfsigned

    - name: remove default server section in nginx configuration
      template:
        src: ../templates/nginx.conf.tpl
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644

    - name: set firewall service rules
      ansible.posix.firewalld:
        zone: public
        service: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - http
        - https

    - name: configure DATABASE settings
      copy:
        dest: /etc/tower/conf.d/db.py
        content: |
          DATABASES = {
              'default': {
                  'ATOMIC_REQUESTS': True,
                  'ENGINE': 'awx.main.db.profiled_pg',
                  'NAME': 'awx',
                  'USER': 'awx',
                  'PASSWORD': '{{ awx_pguser_password }}',
                  'HOST': '{{ node_ip }}',
                  'PORT': '5432',
              }
          }
        owner: awx
        group: awx
        mode: '0640'

    - name: check if awx setup
      stat:
        path: /var/lib/awx/.awx-setup
      register: awx_setup

    - name: run awx-manage migrate
      shell: |
        awx-manage migrate
        touch /var/lib/awx/.awx-setup
      args:
        executable: /bin/bash
      become_user: awx
      register: awx_migrate
      when:
        - not awx_setup.stat.exists
      changed_when: awx_migrate is not search('already exists')

    - name: create awx superuser
      block:
        - name: set awx password
          expect:
            command: "awx-manage createsuperuser --username admin --email admin@example.com"
            responses:
              'Password:': "{{ olam_admin_password }}"
              'Password \(again\):': "{{ olam_admin_password }}"
          register: awx_password
          become_user: awx
          ignore_errors: yes
          changed_when: awx_password.stdout is not search('is already taken')
      when:
        - not awx_setup.stat.exists

    - debug:
        var: awx_password
      when:
        - not awx_setup.stat.exists

# Configure hybrid node type

- name: Configure hybrid node type
  hosts: control_node
  become: yes

  tasks:

    - name: check if awx provisioned
      stat:
        path: /var/lib/awx/.awx-provisioned
      register: awx_provision

    - name: generate awx-manage script
      copy:
        dest: /var/lib/awx/awx_provision.sh
        content: |
            #!/bin/bash

            awx-manage provision_instance --hostname={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }} --node_type=hybrid
            awx-manage register_default_execution_environments
            awx-manage register_queue --queuename=default --hostnames={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
            awx-manage register_queue --queuename=controlplane --hostnames={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
            awx-manage create_preload_data
            touch /var/lib/awx/.awx-provisioned
        owner: awx
        group: awx
        mode: '0700'

    - name: cat script
      shell: |
        cat /var/lib/awx/awx_provision.sh
      args:
        executable: /bin/bash
      become_user: awx
      register: provision_script

    - name: print script contents
      debug:
        msg: "{{ provision_script }}"

    - name: execute awx-manage provision script
      shell: |
        /var/lib/awx/awx_provision.sh
      args:
        executable: /bin/bash
      become_user: awx
      register: awx_provision_script
      changed_when: awx_provision_script is not search('already exists')

    - name: print awx_provision_script
      debug:
        msg: "{{ awx_provision_script }}"

    - name: create initial configuration in receptor
      template:
        src: ../templates/receptor.conf.tpl
        dest: /etc/receptor/receptor.conf
        owner: root
        group: root
        mode: '0644'

    - name: Enable and start ol-automation service
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
        - ol-automation-manager


